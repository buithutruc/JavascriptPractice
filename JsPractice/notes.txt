//CLASSES 

//Factory Function
// function pizzaFactory(pizzaSize) {
//   const crust = "original";
//   const size = pizzaSize;
//   return {
//     bake: () => console.log(`Baking a ${size} ${crust} crust pizza`),
//   };
// }

// const myPizza = pizzaFactory("small");
// myPizza.bake();

//Javascript Classes

class Pizza {
  crust = "original";
  #sauce = "traditional"; //private field
  #size;

  constructor(pizzaSize) {
    this.#size = pizzaSize;
  }

  getCrust() {
    return this.crust;
  }
  setCrust(pizzaCrust) {
    this.crust = pizzaCrust;
  }
  hereYouGo() {
    console.log(
      `Here's your ${this.crust} ${this.#sauce} sauce ${this.#size} piza`
    );
  }
}

const myPizza = new Pizza("large");
myPizza.hereYouGo();

// class SpecialtyPizza extends Pizza {
//   constructor(pizzaSize) {
//     super(pizzaSize);
//     this.type = "The Works";
//   }

//   slice() {
//     console.log(`Our ${this.type} ${this.size} pizza has 8 slices`);
//   }
// }

// const mySpecialty = new SpecialtyPizza("medium");
// mySpecialty.slice();

==================================
//JSON: JavaScript Object Notation

const myObj = {
  name: "Dave",
  hobbies: ["eat", "sleep", "code"],
  hello: function () {
    console.log("Hello!");
  },
};

console.log(myObj);
console.log(myObj.name);
myObj.hello();
console.log(typeof myObj);

const sendJSON = JSON.stringify(myObj); //lost the method
console.log(sendJSON);

console.log(typeof sendJSON);
console.log(sendJSON.name);

const receiveJSON = JSON.parse(sendJSON);
console.log(receiveJSON);
console.log(typeof receiveJSON);

==================================
//JavaScript Errors and Error Handling
"use strict";

// let variable = "Dave";
// console.log(variable);

const makeError = () => {
  let i = 1;
  while (i <= 5) {
    try {
      // throw new customError("This is a custom error!");
      // throw new Error("This is an error!");
      if (i % 2 !== 0) {
        throw new Error("Odd number!");
      }
      console.log("Even number!");
    } catch (err) {
      //name, message, stack
      console.error(err.stack);
      // console.warn(err);
      // console.table(err);
    } finally {
      console.log("...finally");
      i++;
    }
  }
};

makeError();

function customError(message) {
  this.message = message;
  this.name = "customError";
  this.stack = `${this.name}: ${this.message}`;
}

==================================
//DOM - Document Object Model
const view1 = document.getElementById("view1");
console.log(view1);

const view2 = document.querySelector("#view2");
console.log(view2);

view1.style.display = "none";
view2.style.display = "flex";

const views = document.getElementsByClassName("view");
console.log(views);

const sameViews = document.querySelectorAll(".view");
console.log(sameViews);

const divs = view1.querySelectorAll("div");
console.log(divs);

const sameDivs = view1.getElementsByTagName("div");
console.log(sameDivs);

const evenDivs = view1.querySelectorAll("div:nth-of-type(2n)");
console.log(evenDivs);

for (let i = 0; i < evenDivs.length; i++) {
  evenDivs[i].style.backgroundColor = "gold";
  //   evenDivs[i].style.width = "200px";
  //   evenDivs[i].style.height = "200px";
}

const navText = document.querySelector("nav h1");
console.log(navText);
navText.textContent = "Hello World";

const navBar = document.querySelector("nav");
navBar.innerHTML = `<h1>Hello!</h1><p>This should align right</p> `;
console.log(navBar);
navBar.style.justifyContent = "space-between";

console.log(evenDivs[0]);
console.log(evenDivs[0].parentElement);
console.log(evenDivs[0].parentElement.children); //children are actual elements
console.log(evenDivs[0].parentElement.childNodes); //childNodes aren't just elements, they're elements + text nodes + white space nodes + others
console.log(evenDivs[0].parentElement.hasChildNodes);
console.log(evenDivs[0].parentElement.lastChild);
console.log(evenDivs[0].parentElement.lastElementChild);
console.log(evenDivs[0].parentElement.firstChild);
console.log(evenDivs[0].parentElement.firstElementChild);

console.log(evenDivs[0].nextSibling);
console.log(evenDivs[0].nextElementSibling);
console.log(evenDivs[0].previousSibling);
console.log(evenDivs[0].previousElementSibling);

view2.style.flexDirection = "row";
view2.style.flexWrap = "wrap";
view2.style.margin = "10px";

//remove all children (all nodes, not just elements) inside the view2
while (view2.lastChild) {
  view2.lastChild.remove();
}

const createDivs = (parent, iter) => {
  const newDiv = document.createElement("div");
  newDiv.textContent = iter;
  newDiv.style.backgroundColor = "gold";
  newDiv.style.color = "darkblue";
  newDiv.style.width = "100px";
  newDiv.style.height = "100px";
  newDiv.style.margin = "10px";
  newDiv.style.display = "flex";
  newDiv.style.justifyContent = "center";
  newDiv.style.alignItems = "center";
  parent.append(newDiv);
};

// createDivs(view2, 10);
for (let i = 1; i <= 12; i++) {
  createDivs(view2, i);
}


==================================
//JavaScript Event Listeners

//Syntax: addEventListener(event, function, useCapture)

// const doSomething = () => {
//   alert("doing something");
// };

// h2.addEventListener("click", doSomething, false);
// h2.removeEventListener("click", doSomething, false);

// h2.addEventListener("click", function (event) {
//   console.log(event.target);
//   event.target.textContent = "Clicked";
// });

//readystatechange event
document.addEventListener("readystatechange", (event) => {
  if (event.target.readyState === "complete") {
    console.log("readyState: complete");
    initApp();
  }
});

//events can bubble up or outward
const initApp = () => {
  const view = document.querySelector("#view2");
  const div = view.querySelector("div");
  const h2 = div.querySelector("h2");

  const view3 = document.querySelector("#view3");
  const myForm = view3.querySelector("#myForm");

  myForm.addEventListener("submit", (event) => {
    event.preventDefault();
    console.log("submit event");
  });

  view.addEventListener(
    "click",
    (event) => {
      view.classList.toggle("purple");
      view.classList.toggle("darkblue");
    },
    false
  );

  div.addEventListener("click", (event) => {
    // event.stopPropagation();
    // div.style.backgroundColor = "blue";
    div.classList.toggle("blue");
    div.classList.toggle("black");
  });

  h2.addEventListener(
    "click",
    (event) => {
      const myText = event.target.textContent;
      myText === "My 2nd View"
        ? (event.target.textContent = "Clicked")
        : (event.target.textContent = "My 2nd View");
    },
    false
  );

  const nav = document.querySelector("nav");
  nav.addEventListener("mouseover", (event) => {
    event.target.classList.add("height100");
  });
  nav.addEventListener("mouseout", (event) => {
    event.target.classList.remove("height100");
  });
};

==================================
//Web Storage API
// window.alert("okay");

const myArray = ["eat", "sleep", "code"];

const myObject = {
  name: "Truc",
  hobbies: ["eat", "sleep", "code"],
  logName: function () {
    console.log(this.name);
  },
};

// myObject.logName();

sessionStorage.setItem("mySessionStore", JSON.stringify(myArray));
const mySessionData = JSON.parse(sessionStorage.getItem("mySessionStore"));
console.log(mySessionData);

localStorage.setItem("myLocalStore", JSON.stringify(myArray));
// localStorage.removeItem("myLocalStore");
// localStorage.clear();
const key = localStorage.key(0);
const storageLength = localStorage.length;
const myLocalData = JSON.parse(localStorage.getItem("myLocalStore"));
console.log(storageLength);

==================================
//Modules
//by using modules, strict mode is automatically appied to js

// import playGuitar from "./guitar.js";
// import { shredding as shred, plucking as fingerpicking } from "./guitar.js";

import * as Guitars from "./guitar.js";
import User from "./user.js";

// console.log(playGuitar());
// console.log(shred());
// console.log(fingerpicking());

const me = new User("email@email.com", "Truc");
console.log(me);
console.log(me.greeting());

console.log(Guitars.default());
console.log(Guitars.shredding());
console.log(Guitars.plucking());

==================================
//Higher Order Functions

//A higher order function is a function that does at least one of the following:
//takes one or more functions as an argument (parameter)
//returns a function as the result

//forEach()

import { posts } from "./posts.js";

posts.forEach((post) => {
  console.log(post);
});

console.clear();

const filteredPosts = posts.filter((post) => {
  return post.userId === 1;
});

console.log(filteredPosts);

const mappedPosts = filteredPosts.map((post) => {
  return post.id * 10;
});

console.log(mappedPosts);

const reducedPostValue = mappedPosts.reduce((sum, post) => {
  return sum + post;
});

console.log(reducedPostValue);

==================================